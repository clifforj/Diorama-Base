@import 'variables';

.block,
.block:after,
.block:before,
.entity,
.entity:after,
.entity:before {
  float: left;
  background: @blockDefaultBackground;
}

.block:after,
.block:before,
.entity:after,
.entity:before {
  display: block;
  content: '';
  position: absolute;
  height: @blockSize;
  width: @blockSize+1;
}
.block, .entity {
  position: relative;
  height: @blockSize;
  width: @blockSize;

  .transform(rotateY(-90deg) translateX(100%) rotateY(90deg));
  .preserve-3d();
}
.block:after, .entity:after {
  .transform(rotateX(-90deg) translateY(100%));
  .transform-origin(100% 100%);
  .box-shadow(inset 0 0 0 9999px hsla(0,0%,0%,.4));
}
.block:before, .entity:before {
  .transform(rotateX(-90deg) rotateY(90deg) translateX(-100%));
  .transform-origin(0% 0%);
  .box-shadow(inset 0 0 0 9999px hsla(0,0%,0%,.2));
}

.block.shadow {
  .box-shadow(inset 0 0 0 9999px hsla(0,0%,0%,.15));
}

.block-positions(@dioramaGridWidth);

.block-positions(@n, @i: 0) when (@i =< @n) {
  .block.pos-@{i} {
    position: absolute;
    left: @i*@blockSize;
  }
  .block-positions(@n, (@i + 1));
}

.entity,
.entity:before,
.entity:after {
  width: @blockSize/2;
  background: @entityDefaultBackground;
}

.entity:before {
  .transform(rotateX(0deg) rotateY(90deg) translateX(-50%) translateZ(@blockSize/2));
  width: @blockSize;
}

.entity:after {
  .transform(translateX(@blockSize/2));
}

.entity {
  .transform(rotateZ(180deg) translateZ(@blockSize/2) rotateX(-90deg) translateX(-(@blockSize/2)));
  .box-shadow(inset 0 0 0 9999px hsla(0,0%,0%,.4));
}
